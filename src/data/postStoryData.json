{
  "post": {
    "node": {
      "body": {
        "childMarkdownRemark": {
          "html": "<p><a href=\"https://oukayuka.booth.pm/\">りあクト！</a>を読んでReduxを学んだので内容を自分なりにまとめ。</p>\n<h2>Reduxとは</h2>\n<p>Reactはコンポーネントを組み合わせてアプリケーションを作っていくためのライブラリです。コンポーネントには「状態」を持つものがあり、「状態」はそのコンポーネント自身だけではなく親や子のコンポーネントの見た目や振る舞いにも影響を与えます。</p>\n<h3>Reduxが必要な理由</h3>\n<p>（以下画像は<a href=\"https://medium.com/dailyjs/when-do-i-know-im-ready-for-redux-f34da253c85f\">When do I know I’m ready for Redux?</a>から引用しています）</p>\n<p><img src=\"//images.ctfassets.net/t8kgtqnqij4r/37fxW0VNTnNwZ5o8DENIep/1039421f577ec9761cbec429cd04b35c/https___qiita-image-store.s3.amazonaws.com_0_124015_1f4d91d7-ba99-a4fe-9eb8-9b39473376c0.gif\" alt=\"親コンポーネントの状態を子コンポーネントと共有する方法\"></p>\n<p>親コンポーネントの状態を子コンポーネントと共有する方法として、親コンポーネントに必要な状態を持たせておいて、子孫のコンポーネントにそれらの状態をPropsとして渡す方法があります。（React公式：<a href=\"https://ja.reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down%EF%BC%89\">https://ja.reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down）</a></p>\n<p><img src=\"//images.ctfassets.net/t8kgtqnqij4r/SNL5vvkgFfYdzFHktLhRg/14a75ee4cad9eb8d64f85548c5766a1a/https___qiita-image-store.s3.amazonaws.com_0_124015_f9cec367-c92a-badf-95fe-347f23da3a9f.gif\" alt=\"状態を兄弟コンポーネントで共有する場合\"></p>\n<p>状態を兄弟のコンポーネントで共有したい場合、共通の親コンポーネントに状態を持たせます。親コンポーネントはContainer Componentと呼ばれ、子コンポーネントに状態と、状態を変更させるための関数を渡します。子コンポーネントが状態を変更させると、親コンポーネントを経由して別の子コンポーネントに状態が共有されます。（React公式：<a href=\"https://ja.reactjs.org/docs/lifting-state-up.html%EF%BC%89\">https://ja.reactjs.org/docs/lifting-state-up.html）</a></p>\n<p><img src=\"//images.ctfassets.net/t8kgtqnqij4r/4w6xorN6A4vrag7jqYWWGL/1cf0ecbd8769adc0ba4e80c5aaeadc29/https___qiita-image-store.s3.amazonaws.com_0_124015_b4f20d43-0397-abd0-b520-682cb2e57c2e.gif\" alt=\"親子でも兄弟でもないコンポーネントと状態を共有する方法\"></p>\n<p>親子でも兄弟でもないコンポーネントと状態を共有するためには、それぞれのコンポーネントの最も近い祖先をContainer Componentとし、同様に状態を共有します。アプリケーションが大きくなればなるほどこの関係は複雑になっていき、手に負えなくなっていきます。</p>\n<p><img src=\"//images.ctfassets.net/t8kgtqnqij4r/1i6VC92wtQnQkvmZwHNrJS/c79d631008025308b03a97c83bf4a4de/1_f3gS9znOZvX8HfCLg7T--Q.gif\" alt=\"Reduxで状態を管理する方法\"></p>\n<p>Reduxは、コンポーネントのツリーの外側に状態を管理する仕組みを用意することでこの問題を解決するためのライブラリです。</p>\n<h3>Reduxのしくみ</h3>\n<p>（以下画像は<a href=\"https://redux.js.org/tutorials/essentials/part-1-overview-concepts\">Redux公式</a>から引用しています）</p>\n<p><img src=\"//images.ctfassets.net/t8kgtqnqij4r/4sqjdkF3g4YLdcj4vbYeNk/e9f69e0affdb06c63abf9467d95e5960/ReduxDataFlowDiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif\" alt=\"Reduxのしくみ\"></p>\n<p>ただコンポーネントのツリーの外側に状態を持たせるだけであれば、言ってしまえばそれはグローバル変数で、あちこちのコンポーネントから好き勝手読み書きさせてしまうとそれこそ手に負えなくなってしまいます。どのコンポーネントがどの状態を見ているのか、どんなタイミングでどのコンポーネントから状態が変更されるかわからなくなる、など…。そこでReduxでは、3つの原則を掲げ、それを実現するための仕組みを用意しています。</p>\n<h4>Single source of truth</h4>\n<p>Reduxでは、アプリケーションの状態を管理する<strong>store</strong>にオブジェクトツリー<strong>state</strong>とそれを更新するための関数<strong>reducer</strong>を持ち、それらを使って状態を管理します。そして、<strong>storeはアプリケーション内に1つしか存在しない</strong>ことが保証されています。storeが複数あると、storeどうしのやり取りが発生して取り扱いが複雑になってしまいます。storeが1つしか存在しないことが保証されていれば、storeが複数ある場合と比べて取り扱いは単純になりますし、デバッグがやりやすくなったり、テストしやすくなったりします。</p>\n<h4>State is read-only</h4>\n<p>stateは読み込み専用で、直接書き込み（状態を変更）することはできません。Reduxでは、<strong>stateの状態を変更することができるのはreducerのみ</strong>です。前述の通りstoreはアプリケーションにたった1つしかないため、reducerもたった1つしかありません。どのコンポーネントから状態を変更することになってもすべての変更は必ず1つのreducerに集約され、厳密な順序で1つずつ処理されます。そのため、すべての処理は競合しません。また、処理のログを取ることで、デバッグの際に参照したり、処理を再現してテストに利用できたりします。</p>\n<h4>Changes are made with pure functions</h4>\n<p><strong>reducerはstate（変更前の状態）とaction（変更内容）を受け取ってstate（変更後の状態）を返す純粋関数</strong>です。純粋関数であるということは、内部に状態を持たず、ある入力を受け取れば必ず決まった出力を返す関数であるということです。<strong>action</strong>は、stateをどのように変更したいかという内容が示されたオブジェクトです。また、actionは<strong>dispatcher</strong>がUIからイベントを受け取って生成します。UIがreducerに直接actionを渡すのではなくdispatcherを経由することで、UIからstoreの関心を分離することができています。</p>\n<h2>Reduxの使い方</h2>\n<p>コードベースで、実際のReduxの使い方を解説します。</p>\n<h3>Reduxをコンポーネントに提供する</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> counterReducer<span class=\"token punctuation\">,</span> initialState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Provider</h4>\n<p>上位コンポーネントに<code class=\"language-text\">Provider</code>を設置すれば、子孫コンポーネントでreduxの機能をHooks APIを使って利用できる。</p>\n<p><code class=\"language-text\">Provider</code>には初期化したstoreをPropsとして渡す。</p>\n<h4>storeの初期化</h4>\n<p><code class=\"language-text\">createStore</code>を使ってstoreを初期化する。</p>\n<p><code class=\"language-text\">createStore</code>には定義したreducerとstoreの初期値を渡す。counterReducer（定義したreducer）とinitialState（storeの初期値）を<code class=\"language-text\">reducer.ts</code>からimportする。</p>\n<h3>reducerを定義する</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Reducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CounterAction<span class=\"token punctuation\">,</span> CounterActionType <span class=\"token keyword\">as</span> Type <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'actions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">CounterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> initialState<span class=\"token operator\">:</span> CounterState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> counterReducer<span class=\"token operator\">:</span> Reducer<span class=\"token operator\">&lt;</span>CounterState<span class=\"token punctuation\">,</span> CounterAction<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  state<span class=\"token operator\">:</span> CounterState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token operator\">:</span> CounterAction<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CounterState <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Type<span class=\"token punctuation\">.</span><span class=\"token constant\">ADD</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Type<span class=\"token punctuation\">.</span><span class=\"token constant\">DECREMENT</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Type<span class=\"token punctuation\">.</span><span class=\"token constant\">INCREMENT</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> _<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>initialState（storeの初期値）、counterReducer（定義したreducer）とその返り値の型をexportする。</p>\n<h4>reducerの内容</h4>\n<p>例に上げているcounterReducerは</p>\n<ul>\n<li>\n<p>state（<strong>更新前の状態</strong>）とaction（<strong>更新処理に必要な情報</strong>）を受け取る</p>\n<ul>\n<li>stateを受け取らなかった場合initialStateを初期値として設定</li>\n<li>それぞれの型はReducer型のジェネリクスで設定</li>\n</ul>\n</li>\n<li>CounterState型のstate（<strong>更新後の状態</strong>）を返す</li>\n<li>\n<p><code class=\"language-text\">action.type</code>によってstateの更新処理をswitchする</p>\n<ul>\n<li><code class=\"language-text\">Type.ADD</code>と同じだった場合、任意の値を加算</li>\n<li><code class=\"language-text\">Type.DECREMENT</code>と同じだった場合、1減算</li>\n<li><code class=\"language-text\">Type.INCREMENT</code>と同じだった場合、1加算</li>\n<li>どれでもなかった場合stateをそのまま返す（counterに<code class=\"language-text\">CounterAction</code>型アノテーションをつけているため、case文を書き漏らさない限りdefaultには落ちない。case文を書き漏らした場合、never型の変数に代入しようとするため、実際はreturnに行き着く前にコンパイルエラーになる。case文の漏れを未然にチェックするための手法。）</li>\n</ul>\n</li>\n</ul>\n<p>という内容。<strong>更新前の状態</strong>と<strong>更新に必要な情報</strong>を受け取って<strong>更新後の状態</strong>を返す関数。</p>\n<p>更新処理に必要な情報（<code class=\"language-text\">CounterAction</code>型で表現されている）と更新処理の種類（CounterActionType）は<code class=\"language-text\">actions.ts</code>からimportする。（「種類」のTypeと「型」のTypeがごっちゃになってわかりづらくて嫌…）</p>\n<h3>actionsを用意する</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> CounterActionType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">ADD</span><span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DECREMENT</span><span class=\"token operator\">:</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">INCREMENT</span><span class=\"token operator\">:</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ValueOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">CounterAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> ValueOf<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> CounterActionType<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  amount<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>amount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CounterAction <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> CounterActionType<span class=\"token punctuation\">.</span><span class=\"token constant\">ADD</span><span class=\"token punctuation\">,</span>\n  amount<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> decrement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CounterAction <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> CounterActionType<span class=\"token punctuation\">.</span><span class=\"token constant\">DECREMENT</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CounterAction <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> CounterActionType<span class=\"token punctuation\">.</span><span class=\"token constant\">INCREMENT</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>CounterActionType</h4>\n<p>reducerに渡すための「更新処理の種類」を表したオブジェクトです。<code class=\"language-text\">as const</code>をつけることで、CounterActionTypeを定数にする（<code class=\"language-text\">CounterActionType.ADD = xxx</code>がエラーになる）ことができます（constアサーション）。これをすると、<code class=\"language-text\">CounterActionType</code>の型が<code class=\"language-text\">{ ADD: string; DECREMENT: string; INCREMENT: string; }</code>ではなく<code class=\"language-text\">{ readonly ADD: &quot;ADD&quot;; readonly DECREMENT: &quot;DECREMENT&quot;; readonly INCREMENT: &quot;INCREMENT&quot;; }</code>になり、タイポによるバグ発生のリスクを減らすことができます。</p>\n<h4>CounterAction</h4>\n<p>まず、reducerに渡したいactionとは何かというと、プレーンなオブジェクトです。例えばcounterStateのcountに1を加算したいときは<code class=\"language-text\">{type: &#39;INCREMENT&#39;}</code>、counterStateのcountに5（任意の値amountとする)を加算したいときは<code class=\"language-text\">{type: &#39;ADD&#39;, amount: 5}</code>をreducerに渡す、といった具合です。そのプレーンなオブジェクトの型を表現しているのがこのCounterActionです。</p>\n<h5>type</h5>\n<p><code class=\"language-text\">ValueOf&lt;T&gt;</code>という型の関数？のようなものを用意して、オブジェクトの値から型を抽出してユニオン型を作っています。これによって、typeの型は<code class=\"language-text\">&quot;ADD&quot; | &quot;DECREMENT&quot; | &quot;INCREMENT&quot;</code>になります。これの詳しい解説は「りあクト！TypeScriptで始めるつらくないReact開発」第4章、第5節内の「型表現に使われる演算子」にありますので是非ご購入になって読んでください（りあクト！は最高に丁寧でわかりやすい技術書です）。</p>\n<h5>amount</h5>\n<p>actionがaddだった場合、amountプロパティが必要です。increment, decrementだった場合必要ないため、<code class=\"language-text\">?</code>をつけて省略可能にしています。</p>\n<h4>add, decrement, increment</h4>\n<p>これらは、Action Creatorと呼ばれる関数です（「Reduxのしくみ」で説明したdispatcherです）。コンポーネントからstateの値を変更するときは、reducerに直接<code class=\"language-text\">{type: &#39;ADD&#39;, amount: 5}</code>のようなオブジェクトを渡すのではなく、Action Creatorを呼んでその返り値として得たオブジェクトをactionとしてreducerに渡します。</p>\n<h3>コンポーネントからstateの値を取得/変更する</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch<span class=\"token punctuation\">,</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> increment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'actions'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CounterState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reducer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ChildComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'components/ChildComponent'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Counter<span class=\"token operator\">:</span> <span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useSelector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CounterState<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ChildComponent\n      count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n      add<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>amount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      decrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      increment<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useSelector</code>と<code class=\"language-text\">useDispatch</code>はreduxが提供するHooks APIです。<code class=\"language-text\">useSelector</code>と<code class=\"language-text\">useDispatch</code>を使って取得したcountとAction Creatorを子コンポーネントに渡します。</p>\n<h4>useSelector</h4>\n<p><code class=\"language-text\">useSelector</code>を使ってstateからcountを取り出します。引数としてstateからcountを抽出する関数<code class=\"language-text\">(state) =&gt; state.count</code>を渡します。また、ジェネリクスの第1引数にはstate全体の型、第2引数には取り出したいstateの型を渡します。</p>\n<h4>useDispatch</h4>\n<p><code class=\"language-text\">useDispatch</code>にactionを渡してstateを更新するための関数を取得しています。<code class=\"language-text\">dispatch({ type: &#39;INCREMENT&#39; })</code> などすれば<code class=\"language-text\">INCREMENT</code>に紐づくactionが実行されますが、バグを防ぐため、直接actionを渡すのではなく用意したAction Creator関数の返り値を使うようにします。</p>\n<h2>まとめ</h2>\n<p><a href=\"https://oukayuka.booth.pm/\">りあクト！</a>はベテランエンジニアと新米エンジニアの対話形式で最新のReact/TypeScriptを学べる最高の技術書で、この記事の500倍広く深くわかりやすいので、ぜひ購入してください。</p>"
        }
      },
      "description": {
        "description": "りあクト！を読んでReduxを学びました。Reduxとはなにか？なぜ必要か？仕組みと使い方についてまとめました。"
      },
      "image": {
        "file": {
          "url": "//images.ctfassets.net/t8kgtqnqij4r/5lc9tEr4JXHHVkato2EVzc/fe5f8f0eea9cb8d7601407ca443eeb81/______________________Redux____________.png"
        }
      },
      "slug": "20201123-learn-redux-with-riakuto",
      "title": "りあクト！でReduxを学ぶ",
      "updatedAt": "2020年11月23日"
    }
  }
}
